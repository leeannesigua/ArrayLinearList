package data_structures;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class ArrayLinearList<E> implements LinearListADT<E> {
    private E[] list;
    private int currentSize, maxSize;
    public ArrayLinearList(){
    	currentSize = 0;
    	maxSize = DEFAULT_MAX_CAPACITY;
    	list = (E[]) new Object [maxSize];
    }
                         

//  Adds the Object obj to the end of list.  
    public void addLast(E obj){
    	if (currentSize==maxSize)
    		resizeArray();
    	list[currentSize++]=obj;
    }
    private void resizeArray(){
    	maxSize <<= 1;
    	E[]tmp = (E[]) new Object [maxSize];
    	for (int i=0; i<currentSize; i++)
    		tmp[i] = list[i];
    	list=tmp;
    }
//  Adds the Object obj to the beginning of list.  
    public void addFirst(E obj){
    	if (currentSize == maxSize)
    		resizeArray();
    	for(int i = currentSize-1; i >= 0; i--)
    		list[i+1]=list[i];
    	list[0]=obj;
    	currentSize++;

    }
    
//  Inserts the Object obj at the position indicated.  If there is an element at
//  that location, all elements from that location to the end of the list are 
//  shifted down to make room for the new insertion.  The location is one based.
//  If the location > size()+1 then a RuntimeException is thrown. List elements 
//  must be contiguous.
    public void insert(E obj, int location){
    	if(location < 1 || location > currentSize + 1)
    		throw new RuntimeException();
    	if (currentSize==maxSize)
    		resizeArray();
    	for(int i = currentSize-1; i>=location-1; i--)
    		list[i+1]=list[i];
    	list[location-1]=obj;
    	currentSize++;
    }

//  Removes the object located at the parameter location (one based).
//  Throws a RuntimeException if the location does not map to a valid position within the list.
    public E remove(int location){
    	if(location>currentSize || location<1)
    		throw new RuntimeException();
    	E tmp = list[location-1];
    	for(int i=location; i<currentSize; i++)
    		list[i-1]=list[i];
    	currentSize--;
    	shrinkArray();
    	return tmp;
    }
    
    private void shrinkArray(){
    	if (currentSize*4 < maxSize)
    		maxSize >>= 1;
    	E[]tmp = (E[]) new Object [maxSize];
    	for (int i=0; i<currentSize; i++)
    		tmp[i] = list[i];
    	list=tmp;
    }
    
//  Removes and returns the parameter object obj from the list if the list contains it, null otherwise.
//  The ordering of the list is preserved.  The list may contain duplicate elements.  This method
//  removes and returns the first matching element found when traversing the list from first position.
    public E remove (E obj){
    	if(currentSize==0)
    		return null;
    	for(int i=0; i<currentSize; i++){
    		if(((Comparable<E>)obj).compareTo(list[i])==0){
    			E tmp = list[i];
    			for(int j=i; j<currentSize-1; j++)
    				list[j]=list[j+1];
    			currentSize--;
    			shrinkArray();
    			return tmp;
    		}
    	}
    	return null;
    }
    
//  Removes and returns the parameter object obj in first position in list if the list is not empty,  
//  null if the list is empty. The ordering of the list is preserved.
    public E removeFirst(){
    	if(currentSize==0)
    		return null;
    	E tmp = list[0];
    	for (int i=0; i<currentSize-1; i++)
    		list[i]=list[i+1];
    	currentSize--;
    	shrinkArray();
    	return tmp;
    }
    
//  Removes and returns the parameter object obj in last position in list if the list is not empty, 
//  null if the list is empty. The ordering of the list is preserved.
    public E removeLast(){
    	if(currentSize==0)
    		return null;
    	E tmp = list[currentSize-1];
    	currentSize--;
    	shrinkArray();
    	return tmp;
    }

//  Returns the parameter object located at the parameter location position (one based).
//  Throws a RuntimeException if the location does not map to a valid position within the list.
    public E get(int location){
    	if(location>currentSize || location<1)
    		throw new RuntimeException();
    	return list[location-1];
    }

//  Returns true if the parameter object obj is in the list, false otherwise.
    public boolean contains(E obj){
    	if(currentSize==0)
    		return false;
    	for(int i=0; i<currentSize; i++){
    		if(((Comparable<E>)obj).compareTo(list[i])==0)
    			return true;
    	}
    	return false;
    }
    
//  Returns the one based location of the parameter object obj if it is in the list, -1 otherwise.
//  In the case of duplicates, this method returns the element closest to position #1.
    public int locate(E obj){
        if (currentSize==0)
                return -1;
        for(int i=0; i<currentSize; i++){
                if(((Comparable<E>)obj).compareTo(list[i])==0)
                        return i;
        }
        return -1;
    }

//  The list is returned to an empty state.
    public void clear(){
        currentSize=0;
    }

//  Returns true if the list is empty, otherwise false
    public boolean isEmpty(){
        return currentSize==0;
    	
    }

//  Returns the number of Objects currently in the list.
    public int size(){
        return currentSize;
    }
    
//  Returns an Iterator of the values in the list, presented in
//  the same order as the underlying order of the list. (position #1 first)
    public Iterator<E> iterator(){
        return new IteratorHelper();
    }
    class IteratorHelper implements Iterator<E>{
        int iterIndex;
    
        public IteratorHelper(){
                iterIndex=0;
        }
        public boolean hasNext(){
                return iterIndex < currentSize;
        }
        public E next(){
                if (!hasNext())
                        throw new NoSuchElementException();
                return list[iterIndex++];
        }
        public void remove(){
                throw new UnsupportedOperationException();
        }
    }
    
}
